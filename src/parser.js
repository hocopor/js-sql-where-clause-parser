/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { Start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(head, tail) {
           if(tail.length === 0) return head;
           return createGroup('OR', [head].concat(tail.map(i => i[3])));
         },
        function(head, tail) {
           if(tail.length === 0) return head;
           return createGroup('AND', [head].concat(tail.map(i => i[3])));
         },
        function(left, rh) {
              if (rh === null) return left;
              else if (rh.type === 'arithmetic') {
                return createNode(rh.tail[0][1], left, rh.tail[0][3]);
              }
              else return createNode(rh.op, left, rh.right);
            },
        function(e) {
         	return { ...e, parentheses: true }
          },
        function() {
            return null;
          },
        function() {
              return true;
            },
        function() {
              return false;
            },
        function(ca) {
              return ca[1].join('');
            },
        "TIME",
        peg$literalExpectation("TIME", false),
        "DATE",
        peg$literalExpectation("DATE", false),
        "TIMESTAMP",
        peg$literalExpectation("TIMESTAMP", false),
        function(type, ca) {
              return ca[1].join('');
            },
        /^[^'"\\\0-\x1F\x7F]/,
        peg$classExpectation(["'", "\"", "\\", ["\0", "\x1F"], "\x7F"], true, false),
        "\\'",
        peg$literalExpectation("\\'", false),
        function() { return "'";  },
        "\\\"",
        peg$literalExpectation("\\\"", false),
        function() { return '"';  },
        "\\\\",
        peg$literalExpectation("\\\\", false),
        function() { return "\\"; },
        "\\/",
        peg$literalExpectation("\\/", false),
        function() { return "/";  },
        "\\b",
        peg$literalExpectation("\\b", false),
        function() { return "\b"; },
        "\\f",
        peg$literalExpectation("\\f", false),
        function() { return "\f"; },
        "\\n",
        peg$literalExpectation("\\n", false),
        function() { return "\n"; },
        "\\r",
        peg$literalExpectation("\\r", false),
        function() { return "\r"; },
        "\\t",
        peg$literalExpectation("\\t", false),
        function() { return "\t"; },
        "''",
        peg$literalExpectation("''", false),
        function() { return "\'"; },
        function(head, tail) {
            return createList(head, tail);
          },
        function(l) {
            return { type: 'arithmetic', tail: l };
          },
        function(op, right) {
            return { op, right: right };
          },
        function(op, l) {
            return { op, right: l };
          },
        function(op, begin, end) {
            return { op, right: [begin, end] };
          },
        function(t) { return t[0] + ' ' + t[2]; },
        "<>",
        peg$literalExpectation("<>", false),
        ">=",
        peg$literalExpectation(">=", false),
        "<=",
        peg$literalExpectation("<=", false),
        "<",
        peg$literalExpectation("<", false),
        ">",
        peg$literalExpectation(">", false),
        "!=",
        peg$literalExpectation("!=", false),
        "=",
        peg$literalExpectation("=", false),
        "!",
        peg$literalExpectation("!", false),
        peg$otherExpectation("Optional Whitespace"),
        peg$otherExpectation("Mandatory Whitespace"),
        /^[ \t\n\r]/,
        peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        "and",
        peg$literalExpectation("AND", true),
        "or",
        peg$literalExpectation("OR", true),
        "not",
        peg$literalExpectation("NOT", true),
        "like",
        peg$literalExpectation("LIKE", true),
        "in",
        peg$literalExpectation("IN", true),
        "between",
        peg$literalExpectation("BETWEEN", true),
        "is",
        peg$literalExpectation("IS", true),
        "null",
        peg$literalExpectation("NULL", true),
        "true",
        peg$literalExpectation("TRUE", true),
        "false",
        peg$literalExpectation("FALSE", true),
        "(",
        peg$literalExpectation("(", false),
        ")",
        peg$literalExpectation(")", false),
        ",",
        peg$literalExpectation(",", false),
        peg$otherExpectation("Number"),
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        /^[.]/,
        peg$classExpectation(["."], false, false),
        function(x) { return parseFloat(recursiveJoin(x)) },
        peg$otherExpectation("String"),
        /^[a-z0-9_%.]/i,
        peg$classExpectation([["a", "z"], ["0", "9"], "_", "%", "."], false, true),
        function(s) { return s.join(""); },
        "-",
        peg$literalExpectation("-", false),
        "+",
        peg$literalExpectation("+", false),
        "\"",
        peg$literalExpectation("\"", false),
        "'",
        peg$literalExpectation("'", false)
      ],

      peg$bytecode = [
        peg$decode(";!"),
        peg$decode("%;\"/\x83#$%;8/>#;</5$;8/,$;\"/#$+$)($'#(#'#(\"'#&'#0H*%;8/>#;</5$;8/,$;\"/#$+$)($'#(#'#(\"'#&'#&/)$8\": \"\"! )(\"'#&'#"),
        peg$decode("%;#/\x83#$%;8/>#;;/5$;8/,$;#/#$+$)($'#(#'#(\"'#&'#0H*%;8/>#;;/5$;8/,$;#/#$+$)($'#(#'#(\"'#&'#&/)$8\":!\"\"! )(\"'#&'#"),
        peg$decode("%;$/@#;8/7$;..\" &\"/)$8#:\"#\"\" )(#'#(\"'#&'#"),
        peg$decode(";%.\\ &;-.V &%;E/L#;8/C$;!/:$;8/1$;F/($8%:#%!\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";&.5 &;'./ &;).) &;H.# &;("),
        peg$decode("%;B/& 8!:$! )"),
        peg$decode("%;C/& 8!:%! ).. &%;D/& 8!:&! )"),
        peg$decode("%%;L/<#$;*0#*;*&/,$;L/#$+#)(#'#(\"'#&'#/' 8!:'!! )"),
        peg$decode("%2(\"\"6(7).5 &2*\"\"6*7+.) &2,\"\"6,7-/^#;9/U$%;L/<#$;*0#*;*&/,$;L/#$+#)(#'#(\"'#&'#/)$8#:.#\"\" )(#'#(\"'#&'#"),
        peg$decode("4/\"\"5!70.# &;+"),
        peg$decode("%21\"\"6172/& 8!:3! ).\xEC &%24\"\"6475/& 8!:6! ).\xD5 &%27\"\"6778/& 8!:9! ).\xBE &%2:\"\"6:7;/& 8!:<! ).\xA7 &%2=\"\"6=7>/& 8!:?! ).\x90 &%2@\"\"6@7A/& 8!:B! ).y &%2C\"\"6C7D/& 8!:E! ).b &%2F\"\"6F7G/& 8!:H! ).K &%2I\"\"6I7J/& 8!:K! ).4 &%2L\"\"6L7M/& 8!:N! )"),
        peg$decode("%;!/\x83#$%;8/>#;G/5$;8/,$;!/#$+$)($'#(#'#(\"'#&'#0H*%;8/>#;G/5$;8/,$;!/#$+$)($'#(#'#(\"'#&'#&/)$8\":O\"\"! )(\"'#&'#"),
        peg$decode(";I"),
        peg$decode(";/./ &;0.) &;2.# &;1"),
        peg$decode("%$%;8/>#;6/5$;8/,$;$/#$+$)($'#(#'#(\"'#&'#/K#0H*%;8/>#;6/5$;8/,$;$/#$+$)($'#(#'#(\"'#&'#&&&#/' 8!:P!! )"),
        peg$decode("%;4/;#;8/2$;#/)$8#:Q#\"\" )(#'#(\"'#&'#"),
        peg$decode("%;3/_#;8/V$;E/M$;8/D$;,/;$;8/2$;F/)$8':R'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;5/`#;8/W$;H/N$;8/E$;;/<$;8/3$;H/*$8':S'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%;=/5#;8/,$;?/#$+#)(#'#(\"'#&'#/' 8!:T!! ).# &;?"),
        peg$decode("%%;=/5#;8/,$;>/#$+#)(#'#(\"'#&'#/' 8!:T!! ).# &;>"),
        peg$decode("%%;=/5#;8/,$;@/#$+#)(#'#(\"'#&'#/' 8!:T!! ).# &;@"),
        peg$decode("2U\"\"6U7V.e &2W\"\"6W7X.Y &2Y\"\"6Y7Z.M &2[\"\"6[7\\.A &2]\"\"6]7^.5 &2_\"\"6_7`.) &2a\"\"6a7b"),
        peg$decode("2c\"\"6c7d.# &;="),
        peg$decode("<;9.\" &\"=.\" 7e"),
        peg$decode("<%$;:/&#0#*;:&&&#/\"!&,)=.\" 7f"),
        peg$decode("4g\"\"5!7h"),
        peg$decode("3i\"\"5#7j"),
        peg$decode("3k\"\"5\"7l"),
        peg$decode("3m\"\"5#7n"),
        peg$decode("3o\"\"5$7p"),
        peg$decode("3q\"\"5\"7r"),
        peg$decode("3s\"\"5'7t"),
        peg$decode("3u\"\"5\"7v"),
        peg$decode("3w\"\"5$7x"),
        peg$decode("3y\"\"5$7z"),
        peg$decode("3{\"\"5%7|"),
        peg$decode("2}\"\"6}7~"),
        peg$decode("2\x7F\"\"6\x7F7\x80"),
        peg$decode("2\x81\"\"6\x817\x82"),
        peg$decode("<%%4\x84\"\"5!7\x85.\" &\"/\x7F#%$4\x86\"\"5!7\x870)*4\x86\"\"5!7\x87&/2#4\x88\"\"5!7\x89/#$+\")(\"'#&'#.\" &\"/E$$4\x86\"\"5!7\x87/,#0)*4\x86\"\"5!7\x87&&&#/#$+#)(#'#(\"'#&'#/' 8!:\x8A!! )=.\" 7\x83"),
        peg$decode("<%$4\x8C\"\"5!7\x8D/,#0)*4\x8C\"\"5!7\x8D&&&#/' 8!:\x8E!! )=.\" 7\x8B"),
        peg$decode(";I.# &;H"),
        peg$decode("2\x8F\"\"6\x8F7\x90.) &2\x91\"\"6\x917\x92"),
        peg$decode("2\x93\"\"6\x937\x94.) &2\x95\"\"6\x957\x96")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }



    function createGroup(operator, children) {
    	return {
        type: 'group',
        operator,
        children
      }
    }
    
    function createNode(operator, column, value) {
      return {
        type: 'node',
        operator,
        column,
        value
      }
    }
    
    function createValue(type, value) {
      return {
        type,
        value,
      };
    }
    
    function createList(head, tail) {
      return [head].concat(tail.map(i => i[3]));
    }
    
    function recursiveJoin(a) {
      if(Array.isArray(a)) {
        return a.map(recursiveJoin).join("");
      }

      return a;
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
